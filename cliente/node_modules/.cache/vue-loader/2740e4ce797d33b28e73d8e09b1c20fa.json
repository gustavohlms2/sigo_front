{"remainingRequest":"/home/dell/git_projetos/git_sigo_app_login/sigo_app/cliente/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dell/git_projetos/git_sigo_app_login/sigo_app/cliente/src/components/gestao/Norma.vue?vue&type=template&id=21a3c233&","dependencies":[{"path":"/home/dell/git_projetos/git_sigo_app_login/sigo_app/cliente/src/components/gestao/Norma.vue","mtime":1611352642806},{"path":"/home/dell/git_projetos/git_sigo_app_login/sigo_app/cliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dell/git_projetos/git_sigo_app_login/sigo_app/cliente/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/dell/git_projetos/git_sigo_app_login/sigo_app/cliente/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dell/git_projetos/git_sigo_app_login/sigo_app/cliente/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}